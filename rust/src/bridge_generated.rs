#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_get_node_info_impl(
    port_: MessagePort,
    network_info: impl Wire2Api<NetworkInfo> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "get_node_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_network_info = network_info.wire2api();
            move |task_callback| get_node_info(api_network_info)
        },
    )
}
fn wire_generate_mnemonic_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "generate_mnemonic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(generate_mnemonic()),
    )
}
fn wire_create_wallet_account_impl(
    port_: MessagePort,
    network_info: impl Wire2Api<NetworkInfo> + UnwindSafe,
    wallet_info: impl Wire2Api<WalletInfo> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "create_wallet_account",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_network_info = network_info.wire2api();
            let api_wallet_info = wallet_info.wire2api();
            move |task_callback| create_wallet_account(api_network_info, api_wallet_info)
        },
    )
}
fn wire_generate_address_impl(
    port_: MessagePort,
    wallet_info: impl Wire2Api<WalletInfo> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "generate_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_wallet_info = wallet_info.wire2api();
            move |task_callback| generate_address(api_wallet_info)
        },
    )
}
fn wire_request_funds_impl(
    port_: MessagePort,
    network_info: impl Wire2Api<NetworkInfo> + UnwindSafe,
    wallet_info: impl Wire2Api<WalletInfo> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "request_funds",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_network_info = network_info.wire2api();
            let api_wallet_info = wallet_info.wire2api();
            move |task_callback| request_funds(api_network_info, api_wallet_info)
        },
    )
}
fn wire_check_balance_impl(
    port_: MessagePort,
    wallet_info: impl Wire2Api<WalletInfo> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, BaseCoinBalance, _>(
        WrapInfo {
            debug_name: "check_balance",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_wallet_info = wallet_info.wire2api();
            move |task_callback| check_balance(api_wallet_info)
        },
    )
}
fn wire_create_decentralized_identifier_impl(
    port_: MessagePort,
    network_info: impl Wire2Api<NetworkInfo> + UnwindSafe,
    wallet_info: impl Wire2Api<WalletInfo> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "create_decentralized_identifier",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_network_info = network_info.wire2api();
            let api_wallet_info = wallet_info.wire2api();
            move |task_callback| create_decentralized_identifier(api_network_info, api_wallet_info)
        },
    )
}
fn wire_bin_to_hex_impl(
    port_: MessagePort,
    val: impl Wire2Api<String> + UnwindSafe,
    len: impl Wire2Api<usize> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "bin_to_hex",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_val = val.wire2api();
            let api_len = len.wire2api();
            move |task_callback| Result::<_, ()>::Ok(bin_to_hex(api_val, api_len))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for BaseCoinBalance {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.total.into_into_dart().into_dart(),
            self.available.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BaseCoinBalance {}
impl rust2dart::IntoIntoDart<BaseCoinBalance> for BaseCoinBalance {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use self::io::*;
